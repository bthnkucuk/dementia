name: Build & deploy Android app for an environment

on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      release-status:
        required: true
        type: string
      new-pubspec-version:
        required: true
        type: string

jobs:
  deployAndroid:
    name: 🤖📦🚀 Build & deploy Android ${{ inputs.environment-name }} release
    environment: ${{ inputs.environment-name }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 📦🚀 Calculate android package id and fvm flutter version
        id: calculate_package_id_flutter_version
        run: |
          package_id=$(./scripts/get_application_id_for_android.sh "${{ inputs.environment-name }}")
          flutter_version=$(./scripts/get_flutter_version.sh)
          echo "package_id=$package_id" >> $GITHUB_OUTPUT
          echo "flutter_version=$flutter_version" >> $GITHUB_OUTPUT

      - name: ⚙️ Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"
        id: java

      - name: ⚙️ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.calculate_package_id_flutter_version.outputs.flutter_version }}
          channel: "stable"
          cache: true
        id: flutter

      - name: 🔐 Retrieve base64 keystore and decode it to a file
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: echo $KEYSTORE_BASE64 | base64 --decode > "${{ github.workspace }}/upload-keystore.jks"

      - name: 📝🔐 Create key.properties file
        env:
          KEYSTORE_PROPERTIES_PATH: ${{ github.workspace }}/android/key.properties
        run: |
          echo '${{ inputs.environment-name }}StoreFile=${{ github.workspace }}/upload-keystore.jks' > $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.environment-name }}KeyAlias=${{ secrets.KEYSTORE_KEY_ALIAS }}' >> $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.environment-name }}StorePassword=${{ secrets.KEYSTORE_PASSWORD }}' >> $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.environment-name }}KeyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}' >> $KEYSTORE_PROPERTIES_PATH

      - name: 📝 Edit pubspec version
        run: |
          sed -Ei "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/"pubspec.yaml

      - name: ⚙️ Setup Melos
        uses: bluefireteam/melos-action@v2

      - name: ⚙️ Install dependencies for all packages
        run: melos build:clean

      - name: 🤖📦 Create Android ${{ inputs.environment-name }} appbundle release
        run: |
          pushd app
          mkdir debug-symbols
          flutter gen-l10n
          flutter build appbundle \
            --release \
            --flavor ${{ inputs.environment-name }} \
            --target lib/main_${{ inputs.environment-name }}.dart
          popd

      - name: 🤖🚀 Upload Android ${{ inputs.environment-name}} Release to Play Store
        id: upload_play_store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          packageName: ${{ steps.calculate_package_id_flutter_version.outputs.package_id }}
          track: internal
          status: ${{ inputs.release-status }}
          releaseFiles: ${{ github.workspace }}/app/build/app/outputs/bundle/${{ inputs.environment-name }}Release/app-${{ inputs.environment-name }}-release.aab
          serviceAccountJsonPlainText: "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY_JSON }}"
          # changesNotSentForReview: true

      # - name: 💬 Pick a random success catchphrase
      #   if: success()
      #   id: success_catchphrase
      #   run: |
      #     sentences=('🤩 AMAZING !' 'Woop woop 🎉' 'Oh wow 😮' '😎 Yeahhhh !' '📣 Amazing announcement !' '📢 Your attention please...' '👏 Great work !' '🍾 Champagne !' '🙌 High five !' '🥳 Time to celebrate !')
      #     arrayLength=${#sentences[@]}
      #     randomNumber=$(($RANDOM%$arrayLength))
      #     pickedSentence=${sentences[$randomNumber]}
      #     echo "picked_sentence=$pickedSentence" >> $GITHUB_OUTPUT
      # - name: 🔔✅ Send success notif to Discord
      #   if: success()
      #   uses: sarisia/actions-status-discord@v1
      #   with:
      #     webhook: ${{ secrets.DISCORD_DEPLOYMENT_WEBHOOK_URL }}
      #     avatar_url: ${{ vars.DISCORD_DEPLOYMENT_WEBHOOK_AVATAR_SUCCESS }}
      #     username: "Android Notifier"
      #     content: "${{ vars.DISCORD_SUCCESS_USER_TAG }} ${{ steps.success_catchphrase.outputs.picked_sentence }}"
      #     title: "🤖 New version is available on Android!"
      #     description: |
      #       Version `${{ inputs.new-pubspec-version }}:${{ inputs.environment-name }}`
      #     nofail: true
      #     nodetail: true
      # - name: 🔔❌ Send failure notif to Discord
      #   if: failure()
      #   uses: sarisia/actions-status-discord@v1
      #   with:
      #     webhook: ${{ secrets.DISCORD_DEPLOYMENT_WEBHOOK_URL }}
      #     avatar_url: ${{ vars.DISCORD_DEPLOYMENT_WEBHOOK_AVATAR_FAILURE }}
      #     username: "Android Notifier"
      #     content: "${{ vars.DISCORD_FAILURE_USER_TAG }} Oh no 😢"
      #     title: "🤖 Release of ${{ inputs.environment-name }} has failed..."
      #     description: |
      #       Failed job: 🍏📦🚀 Build & deploy Android ${{ inputs.environment-name }} release
      #       Failed to release version `${{ inputs.new-pubspec-version }}` of ${{ inputs.environment-name }}
      #     nofail: true
      #     nodetail: true
###
